// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3b1bf41aDecodeCodexInternalPkgDomain(in *jlexer.Lexer, out *PlaylistWithMovies) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "userId":
			out.UserId = string(in.String())
		case "public":
			out.Public = bool(in.Bool())
		case "movieList":
			if in.IsNull() {
				in.Skip()
				out.MovieList = nil
			} else {
				in.Delim('[')
				if out.MovieList == nil {
					if !in.IsDelim(']') {
						out.MovieList = make([]MovieBasic, 0, 0)
					} else {
						out.MovieList = []MovieBasic{}
					}
				} else {
					out.MovieList = (out.MovieList)[:0]
				}
				for !in.IsDelim(']') {
					var v1 MovieBasic
					(v1).UnmarshalEasyJSON(in)
					out.MovieList = append(out.MovieList, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b1bf41aEncodeCodexInternalPkgDomain(out *jwriter.Writer, in PlaylistWithMovies) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix)
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"public\":"
		out.RawString(prefix)
		out.Bool(bool(in.Public))
	}
	{
		const prefix string = ",\"movieList\":"
		out.RawString(prefix)
		if in.MovieList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.MovieList {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaylistWithMovies) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b1bf41aEncodeCodexInternalPkgDomain(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaylistWithMovies) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b1bf41aDecodeCodexInternalPkgDomain(l, v)
}
func easyjson3b1bf41aDecodeCodexInternalPkgDomain1(in *jlexer.Lexer, out *PlaylistResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "imgSrc":
			out.ImgSrc = string(in.String())
		case "public":
			out.Public = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b1bf41aEncodeCodexInternalPkgDomain1(out *jwriter.Writer, in PlaylistResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"imgSrc\":"
		out.RawString(prefix)
		out.String(string(in.ImgSrc))
	}
	{
		const prefix string = ",\"public\":"
		out.RawString(prefix)
		out.Bool(bool(in.Public))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaylistResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b1bf41aEncodeCodexInternalPkgDomain1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaylistResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b1bf41aDecodeCodexInternalPkgDomain1(l, v)
}
func easyjson3b1bf41aDecodeCodexInternalPkgDomain2(in *jlexer.Lexer, out *PlaylistRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "userId":
			out.UserId = string(in.String())
		case "public":
			out.Public = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b1bf41aEncodeCodexInternalPkgDomain2(out *jwriter.Writer, in PlaylistRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix)
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"public\":"
		out.RawString(prefix)
		out.Bool(bool(in.Public))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlaylistRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b1bf41aEncodeCodexInternalPkgDomain2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlaylistRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b1bf41aDecodeCodexInternalPkgDomain2(l, v)
}
func easyjson3b1bf41aDecodeCodexInternalPkgDomain3(in *jlexer.Lexer, out *Playlist) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.Id = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "imgSrc":
			out.ImgSrc = string(in.String())
		case "public":
			out.Public = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b1bf41aEncodeCodexInternalPkgDomain3(out *jwriter.Writer, in Playlist) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"imgSrc\":"
		out.RawString(prefix)
		out.String(string(in.ImgSrc))
	}
	{
		const prefix string = ",\"public\":"
		out.RawString(prefix)
		out.Bool(bool(in.Public))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Playlist) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b1bf41aEncodeCodexInternalPkgDomain3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Playlist) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b1bf41aDecodeCodexInternalPkgDomain3(l, v)
}
func easyjson3b1bf41aDecodeCodexInternalPkgDomain4(in *jlexer.Lexer, out *MovieInPlaylist) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "movieId":
			out.MovieId = string(in.String())
		case "bookmarkId":
			out.PlaylistId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b1bf41aEncodeCodexInternalPkgDomain4(out *jwriter.Writer, in MovieInPlaylist) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"movieId\":"
		out.RawString(prefix[1:])
		out.String(string(in.MovieId))
	}
	{
		const prefix string = ",\"bookmarkId\":"
		out.RawString(prefix)
		out.String(string(in.PlaylistId))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MovieInPlaylist) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b1bf41aEncodeCodexInternalPkgDomain4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MovieInPlaylist) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b1bf41aDecodeCodexInternalPkgDomain4(l, v)
}
func easyjson3b1bf41aDecodeCodexInternalPkgDomain5(in *jlexer.Lexer, out *DeletePlaylistInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bookmarkId":
			out.PlaylistId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b1bf41aEncodeCodexInternalPkgDomain5(out *jwriter.Writer, in DeletePlaylistInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bookmarkId\":"
		out.RawString(prefix[1:])
		out.String(string(in.PlaylistId))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeletePlaylistInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b1bf41aEncodeCodexInternalPkgDomain5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeletePlaylistInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b1bf41aDecodeCodexInternalPkgDomain5(l, v)
}
func easyjson3b1bf41aDecodeCodexInternalPkgDomain6(in *jlexer.Lexer, out *AlterPlaylistPublicInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bookmarkId":
			out.PlaylistId = string(in.String())
		case "public":
			out.Public = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b1bf41aEncodeCodexInternalPkgDomain6(out *jwriter.Writer, in AlterPlaylistPublicInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bookmarkId\":"
		out.RawString(prefix[1:])
		out.String(string(in.PlaylistId))
	}
	{
		const prefix string = ",\"public\":"
		out.RawString(prefix)
		out.Bool(bool(in.Public))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AlterPlaylistPublicInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b1bf41aEncodeCodexInternalPkgDomain6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AlterPlaylistPublicInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b1bf41aDecodeCodexInternalPkgDomain6(l, v)
}
