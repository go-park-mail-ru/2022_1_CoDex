// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonFa9374f5DecodeCodexInternalPkgDomain(in *jlexer.Lexer, out *AnnouncedSummary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "href":
			out.Href = string(in.String())
		case "poster":
			out.Poster = string(in.String())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa9374f5EncodeCodexInternalPkgDomain(out *jwriter.Writer, in AnnouncedSummary) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"href\":"
		out.RawString(prefix[1:])
		out.String(string(in.Href))
	}
	{
		const prefix string = ",\"poster\":"
		out.RawString(prefix)
		out.String(string(in.Poster))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnnouncedSummary) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa9374f5EncodeCodexInternalPkgDomain(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnnouncedSummary) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa9374f5DecodeCodexInternalPkgDomain(l, v)
}
func easyjsonFa9374f5DecodeCodexInternalPkgDomain1(in *jlexer.Lexer, out *AnnouncedSearch) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.Id = string(in.String())
		case "poster":
			out.Poster = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "releasedate":
			out.Releasedate = string(in.String())
		case "info":
			out.Info = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa9374f5EncodeCodexInternalPkgDomain1(out *jwriter.Writer, in AnnouncedSearch) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"poster\":"
		out.RawString(prefix)
		out.String(string(in.Poster))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"releasedate\":"
		out.RawString(prefix)
		out.String(string(in.Releasedate))
	}
	{
		const prefix string = ",\"info\":"
		out.RawString(prefix)
		out.String(string(in.Info))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnnouncedSearch) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa9374f5EncodeCodexInternalPkgDomain1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnnouncedSearch) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa9374f5DecodeCodexInternalPkgDomain1(l, v)
}
func easyjsonFa9374f5DecodeCodexInternalPkgDomain2(in *jlexer.Lexer, out *AnnouncedResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "movie":
			(out.Announced).UnmarshalEasyJSON(in)
		case "related":
			if in.IsNull() {
				in.Skip()
				out.Related = nil
			} else {
				in.Delim('[')
				if out.Related == nil {
					if !in.IsDelim(']') {
						out.Related = make([]AnnouncedSummary, 0, 1)
					} else {
						out.Related = []AnnouncedSummary{}
					}
				} else {
					out.Related = (out.Related)[:0]
				}
				for !in.IsDelim(']') {
					var v1 AnnouncedSummary
					(v1).UnmarshalEasyJSON(in)
					out.Related = append(out.Related, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa9374f5EncodeCodexInternalPkgDomain2(out *jwriter.Writer, in AnnouncedResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"movie\":"
		out.RawString(prefix[1:])
		(in.Announced).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"related\":"
		out.RawString(prefix)
		if in.Related == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Related {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnnouncedResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa9374f5EncodeCodexInternalPkgDomain2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnnouncedResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa9374f5DecodeCodexInternalPkgDomain2(l, v)
}
func easyjsonFa9374f5DecodeCodexInternalPkgDomain3(in *jlexer.Lexer, out *AnnouncedBasicResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "movielist":
			if in.IsNull() {
				in.Skip()
				out.MovieList = nil
			} else {
				in.Delim('[')
				if out.MovieList == nil {
					if !in.IsDelim(']') {
						out.MovieList = make([]AnnouncedBasic, 0, 0)
					} else {
						out.MovieList = []AnnouncedBasic{}
					}
				} else {
					out.MovieList = (out.MovieList)[:0]
				}
				for !in.IsDelim(']') {
					var v4 AnnouncedBasic
					(v4).UnmarshalEasyJSON(in)
					out.MovieList = append(out.MovieList, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa9374f5EncodeCodexInternalPkgDomain3(out *jwriter.Writer, in AnnouncedBasicResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"movielist\":"
		out.RawString(prefix)
		if in.MovieList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.MovieList {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnnouncedBasicResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa9374f5EncodeCodexInternalPkgDomain3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnnouncedBasicResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa9374f5DecodeCodexInternalPkgDomain3(l, v)
}
func easyjsonFa9374f5DecodeCodexInternalPkgDomain4(in *jlexer.Lexer, out *AnnouncedBasic) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.Id = string(in.String())
		case "poster":
			out.Poster = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "originalTitle":
			out.OriginalTitle = string(in.String())
		case "premierDay":
			out.PremierDay = string(in.String())
		case "premierMonth":
			out.PremierMonth = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa9374f5EncodeCodexInternalPkgDomain4(out *jwriter.Writer, in AnnouncedBasic) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"poster\":"
		out.RawString(prefix)
		out.String(string(in.Poster))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"originalTitle\":"
		out.RawString(prefix)
		out.String(string(in.OriginalTitle))
	}
	{
		const prefix string = ",\"premierDay\":"
		out.RawString(prefix)
		out.String(string(in.PremierDay))
	}
	{
		const prefix string = ",\"premierMonth\":"
		out.RawString(prefix)
		out.String(string(in.PremierMonth))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnnouncedBasic) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa9374f5EncodeCodexInternalPkgDomain4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnnouncedBasic) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa9374f5DecodeCodexInternalPkgDomain4(l, v)
}
func easyjsonFa9374f5DecodeCodexInternalPkgDomain5(in *jlexer.Lexer, out *Announced) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.Id = string(in.String())
		case "poster":
			out.Poster = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "originalTitle":
			out.TitleOriginal = string(in.String())
		case "info":
			out.Info = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "trailerHref":
			out.Trailer = string(in.String())
		case "releasedate":
			out.Releasedate = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "director":
			out.Director = string(in.String())
		case "cast":
			if in.IsNull() {
				in.Skip()
				out.Actors = nil
			} else {
				in.Delim('[')
				if out.Actors == nil {
					if !in.IsDelim(']') {
						out.Actors = make([]Cast, 0, 2)
					} else {
						out.Actors = []Cast{}
					}
				} else {
					out.Actors = (out.Actors)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Cast
					easyjsonFa9374f5DecodeCodexInternalPkgDomain6(in, &v7)
					out.Actors = append(out.Actors, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "genres":
			if in.IsNull() {
				in.Skip()
				out.Genres = nil
			} else {
				in.Delim('[')
				if out.Genres == nil {
					if !in.IsDelim(']') {
						out.Genres = make([]GenreInMovie, 0, 2)
					} else {
						out.Genres = []GenreInMovie{}
					}
				} else {
					out.Genres = (out.Genres)[:0]
				}
				for !in.IsDelim(']') {
					var v8 GenreInMovie
					easyjsonFa9374f5DecodeCodexInternalPkgDomain7(in, &v8)
					out.Genres = append(out.Genres, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa9374f5EncodeCodexInternalPkgDomain5(out *jwriter.Writer, in Announced) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"poster\":"
		out.RawString(prefix)
		out.String(string(in.Poster))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"originalTitle\":"
		out.RawString(prefix)
		out.String(string(in.TitleOriginal))
	}
	{
		const prefix string = ",\"info\":"
		out.RawString(prefix)
		out.String(string(in.Info))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"trailerHref\":"
		out.RawString(prefix)
		out.String(string(in.Trailer))
	}
	{
		const prefix string = ",\"releasedate\":"
		out.RawString(prefix)
		out.String(string(in.Releasedate))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"director\":"
		out.RawString(prefix)
		out.String(string(in.Director))
	}
	{
		const prefix string = ",\"cast\":"
		out.RawString(prefix)
		if in.Actors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Actors {
				if v9 > 0 {
					out.RawByte(',')
				}
				easyjsonFa9374f5EncodeCodexInternalPkgDomain6(out, v10)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		if in.Genres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Genres {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjsonFa9374f5EncodeCodexInternalPkgDomain7(out, v12)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Announced) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFa9374f5EncodeCodexInternalPkgDomain5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Announced) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFa9374f5DecodeCodexInternalPkgDomain5(l, v)
}
func easyjsonFa9374f5DecodeCodexInternalPkgDomain7(in *jlexer.Lexer, out *GenreInMovie) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "href":
			out.Href = string(in.String())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa9374f5EncodeCodexInternalPkgDomain7(out *jwriter.Writer, in GenreInMovie) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"href\":"
		out.RawString(prefix[1:])
		out.String(string(in.Href))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	out.RawByte('}')
}
func easyjsonFa9374f5DecodeCodexInternalPkgDomain6(in *jlexer.Lexer, out *Cast) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "href":
			out.Href = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFa9374f5EncodeCodexInternalPkgDomain6(out *jwriter.Writer, in Cast) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"href\":"
		out.RawString(prefix)
		out.String(string(in.Href))
	}
	out.RawByte('}')
}
