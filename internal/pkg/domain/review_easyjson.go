// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2f096870DecodeCodexInternalPkgDomain(in *jlexer.Lexer, out *UserReviewResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.Id = uint64(in.Uint64())
		case "reviewsList":
			if in.IsNull() {
				in.Skip()
				out.Reviews = nil
			} else {
				in.Delim('[')
				if out.Reviews == nil {
					if !in.IsDelim(']') {
						out.Reviews = make([]UserReview, 0, 0)
					} else {
						out.Reviews = []UserReview{}
					}
				} else {
					out.Reviews = (out.Reviews)[:0]
				}
				for !in.IsDelim(']') {
					var v1 UserReview
					(v1).UnmarshalEasyJSON(in)
					out.Reviews = append(out.Reviews, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f096870EncodeCodexInternalPkgDomain(out *jwriter.Writer, in UserReviewResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"reviewsList\":"
		out.RawString(prefix)
		if in.Reviews == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Reviews {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserReviewResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f096870EncodeCodexInternalPkgDomain(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserReviewResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f096870DecodeCodexInternalPkgDomain(l, v)
}
func easyjson2f096870DecodeCodexInternalPkgDomain1(in *jlexer.Lexer, out *UserReview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "number":
			out.MovieId = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "text":
			out.Rating = string(in.String())
		case "date":
			out.Date = string(in.String())
		case "feedbacktype":
			out.FeedbackType = string(in.String())
		case "movieTitle":
			out.MovieTitle = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2f096870EncodeCodexInternalPkgDomain1(out *jwriter.Writer, in UserReview) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix[1:])
		out.String(string(in.MovieId))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if in.Rating != "" {
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Rating))
	}
	if in.Date != "" {
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.Date))
	}
	if in.FeedbackType != "" {
		const prefix string = ",\"feedbacktype\":"
		out.RawString(prefix)
		out.String(string(in.FeedbackType))
	}
	if in.MovieTitle != "" {
		const prefix string = ",\"movieTitle\":"
		out.RawString(prefix)
		out.String(string(in.MovieTitle))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserReview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2f096870EncodeCodexInternalPkgDomain1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserReview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2f096870DecodeCodexInternalPkgDomain1(l, v)
}
