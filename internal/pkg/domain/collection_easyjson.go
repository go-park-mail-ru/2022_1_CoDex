// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson31a05f68DecodeCodexInternalPkgDomain(in *jlexer.Lexer, out *FeedResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "collectionlist":
			if in.IsNull() {
				in.Skip()
				out.CollectionList = nil
			} else {
				in.Delim('[')
				if out.CollectionList == nil {
					if !in.IsDelim(']') {
						out.CollectionList = make([]Feed, 0, 1)
					} else {
						out.CollectionList = []Feed{}
					}
				} else {
					out.CollectionList = (out.CollectionList)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Feed
					(v1).UnmarshalEasyJSON(in)
					out.CollectionList = append(out.CollectionList, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson31a05f68EncodeCodexInternalPkgDomain(out *jwriter.Writer, in FeedResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"collectionlist\":"
		out.RawString(prefix[1:])
		if in.CollectionList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.CollectionList {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FeedResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson31a05f68EncodeCodexInternalPkgDomain(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FeedResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson31a05f68DecodeCodexInternalPkgDomain(l, v)
}
func easyjson31a05f68DecodeCodexInternalPkgDomain1(in *jlexer.Lexer, out *Feed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "imgsrc":
			out.ImgSrc = string(in.String())
		case "page":
			out.Page = string(in.String())
		case "number":
			out.Num = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson31a05f68EncodeCodexInternalPkgDomain1(out *jwriter.Writer, in Feed) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"imgsrc\":"
		out.RawString(prefix)
		out.String(string(in.ImgSrc))
	}
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix)
		out.String(string(in.Page))
	}
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix)
		out.String(string(in.Num))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Feed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson31a05f68EncodeCodexInternalPkgDomain1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Feed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson31a05f68DecodeCodexInternalPkgDomain1(l, v)
}
func easyjson31a05f68DecodeCodexInternalPkgDomain2(in *jlexer.Lexer, out *Collection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "public":
			out.Public = bool(in.Bool())
		case "userId":
			out.UserId = string(in.String())
		case "movielist":
			if in.IsNull() {
				in.Skip()
				out.MovieList = nil
			} else {
				in.Delim('[')
				if out.MovieList == nil {
					if !in.IsDelim(']') {
						out.MovieList = make([]MovieBasic, 0, 0)
					} else {
						out.MovieList = []MovieBasic{}
					}
				} else {
					out.MovieList = (out.MovieList)[:0]
				}
				for !in.IsDelim(']') {
					var v4 MovieBasic
					easyjson31a05f68DecodeCodexInternalPkgDomain3(in, &v4)
					out.MovieList = append(out.MovieList, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson31a05f68EncodeCodexInternalPkgDomain2(out *jwriter.Writer, in Collection) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"public\":"
		out.RawString(prefix)
		out.Bool(bool(in.Public))
	}
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix)
		out.String(string(in.UserId))
	}
	{
		const prefix string = ",\"movielist\":"
		out.RawString(prefix)
		if in.MovieList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.MovieList {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson31a05f68EncodeCodexInternalPkgDomain3(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Collection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson31a05f68EncodeCodexInternalPkgDomain2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Collection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson31a05f68DecodeCodexInternalPkgDomain2(l, v)
}
func easyjson31a05f68DecodeCodexInternalPkgDomain3(in *jlexer.Lexer, out *MovieBasic) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.Id = string(in.String())
		case "poster":
			out.Poster = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "rating":
			out.Rating = string(in.String())
		case "info":
			out.Info = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson31a05f68EncodeCodexInternalPkgDomain3(out *jwriter.Writer, in MovieBasic) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"poster\":"
		out.RawString(prefix)
		out.String(string(in.Poster))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.String(string(in.Rating))
	}
	{
		const prefix string = ",\"info\":"
		out.RawString(prefix)
		out.String(string(in.Info))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}
