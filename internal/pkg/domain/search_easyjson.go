// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD4176298DecodeCodexInternalPkgDomain(in *jlexer.Lexer, out *SearchUsersResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "isEmpty":
			out.Empty = bool(in.Bool())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]UserPublicInfo, 0, 2)
					} else {
						out.Data = []UserPublicInfo{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 UserPublicInfo
					easyjsonD4176298DecodeCodexInternalPkgDomain1(in, &v1)
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeCodexInternalPkgDomain(out *jwriter.Writer, in SearchUsersResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"isEmpty\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Empty))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Data {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjsonD4176298EncodeCodexInternalPkgDomain1(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchUsersResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeCodexInternalPkgDomain(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchUsersResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeCodexInternalPkgDomain(l, v)
}
func easyjsonD4176298DecodeCodexInternalPkgDomain1(in *jlexer.Lexer, out *UserPublicInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.Id = uint64(in.Uint64())
		case "name":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeCodexInternalPkgDomain1(out *jwriter.Writer, in UserPublicInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	out.RawByte('}')
}
func easyjsonD4176298DecodeCodexInternalPkgDomain2(in *jlexer.Lexer, out *SearchResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "movies":
			(out.Movies).UnmarshalEasyJSON(in)
		case "genres":
			(out.Genres).UnmarshalEasyJSON(in)
		case "actors":
			(out.Actors).UnmarshalEasyJSON(in)
		case "announced":
			(out.Announced).UnmarshalEasyJSON(in)
		case "bookmarks":
			(out.Bookmarks).UnmarshalEasyJSON(in)
		case "users":
			(out.Users).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeCodexInternalPkgDomain2(out *jwriter.Writer, in SearchResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"movies\":"
		out.RawString(prefix[1:])
		(in.Movies).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"genres\":"
		out.RawString(prefix)
		(in.Genres).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"actors\":"
		out.RawString(prefix)
		(in.Actors).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"announced\":"
		out.RawString(prefix)
		(in.Announced).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"bookmarks\":"
		out.RawString(prefix)
		(in.Bookmarks).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix)
		(in.Users).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeCodexInternalPkgDomain2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeCodexInternalPkgDomain2(l, v)
}
func easyjsonD4176298DecodeCodexInternalPkgDomain3(in *jlexer.Lexer, out *SearchMoviesResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "isEmpty":
			out.Empty = bool(in.Bool())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]MovieBasic, 0, 0)
					} else {
						out.Data = []MovieBasic{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v4 MovieBasic
					(v4).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeCodexInternalPkgDomain3(out *jwriter.Writer, in SearchMoviesResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"isEmpty\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Empty))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Data {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchMoviesResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeCodexInternalPkgDomain3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchMoviesResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeCodexInternalPkgDomain3(l, v)
}
func easyjsonD4176298DecodeCodexInternalPkgDomain4(in *jlexer.Lexer, out *SearchGenresResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "isEmpty":
			out.Empty = bool(in.Bool())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]string, 0, 4)
					} else {
						out.Data = []string{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Data = append(out.Data, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeCodexInternalPkgDomain4(out *jwriter.Writer, in SearchGenresResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"isEmpty\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Empty))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Data {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchGenresResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeCodexInternalPkgDomain4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchGenresResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeCodexInternalPkgDomain4(l, v)
}
func easyjsonD4176298DecodeCodexInternalPkgDomain5(in *jlexer.Lexer, out *SearchBookmarksResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "isEmpty":
			out.Empty = bool(in.Bool())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]Bookmark, 0, 1)
					} else {
						out.Data = []Bookmark{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v10 Bookmark
					(v10).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeCodexInternalPkgDomain5(out *jwriter.Writer, in SearchBookmarksResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"isEmpty\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Empty))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Data {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchBookmarksResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeCodexInternalPkgDomain5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchBookmarksResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeCodexInternalPkgDomain5(l, v)
}
func easyjsonD4176298DecodeCodexInternalPkgDomain6(in *jlexer.Lexer, out *SearchAnnouncedResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "isEmpty":
			out.Empty = bool(in.Bool())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]AnnouncedSearch, 0, 0)
					} else {
						out.Data = []AnnouncedSearch{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v13 AnnouncedSearch
					(v13).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeCodexInternalPkgDomain6(out *jwriter.Writer, in SearchAnnouncedResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"isEmpty\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Empty))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Data {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchAnnouncedResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeCodexInternalPkgDomain6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchAnnouncedResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeCodexInternalPkgDomain6(l, v)
}
func easyjsonD4176298DecodeCodexInternalPkgDomain7(in *jlexer.Lexer, out *SearchActorsResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "isEmpty":
			out.Empty = bool(in.Bool())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]ActorBasic, 0, 1)
					} else {
						out.Data = []ActorBasic{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v16 ActorBasic
					(v16).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD4176298EncodeCodexInternalPkgDomain7(out *jwriter.Writer, in SearchActorsResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"isEmpty\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Empty))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Data {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchActorsResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD4176298EncodeCodexInternalPkgDomain7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchActorsResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD4176298DecodeCodexInternalPkgDomain7(l, v)
}
