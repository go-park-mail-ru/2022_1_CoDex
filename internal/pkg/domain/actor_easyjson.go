// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1a61c37dDecodeCodexInternalPkgDomain(in *jlexer.Lexer, out *ActorResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "actor":
			(out.Person).UnmarshalEasyJSON(in)
		case "related":
			if in.IsNull() {
				in.Skip()
				out.Related = nil
			} else {
				in.Delim('[')
				if out.Related == nil {
					if !in.IsDelim(']') {
						out.Related = make([]ActorBasic, 0, 1)
					} else {
						out.Related = []ActorBasic{}
					}
				} else {
					out.Related = (out.Related)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ActorBasic
					(v1).UnmarshalEasyJSON(in)
					out.Related = append(out.Related, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "movies":
			if in.IsNull() {
				in.Skip()
				out.Movies = nil
			} else {
				in.Delim('[')
				if out.Movies == nil {
					if !in.IsDelim(']') {
						out.Movies = make([]MovieBasic, 0, 0)
					} else {
						out.Movies = []MovieBasic{}
					}
				} else {
					out.Movies = (out.Movies)[:0]
				}
				for !in.IsDelim(']') {
					var v2 MovieBasic
					easyjson1a61c37dDecodeCodexInternalPkgDomain1(in, &v2)
					out.Movies = append(out.Movies, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a61c37dEncodeCodexInternalPkgDomain(out *jwriter.Writer, in ActorResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"actor\":"
		out.RawString(prefix[1:])
		(in.Person).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"related\":"
		out.RawString(prefix)
		if in.Related == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Related {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"movies\":"
		out.RawString(prefix)
		if in.Movies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Movies {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson1a61c37dEncodeCodexInternalPkgDomain1(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActorResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a61c37dEncodeCodexInternalPkgDomain(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActorResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a61c37dDecodeCodexInternalPkgDomain(l, v)
}
func easyjson1a61c37dDecodeCodexInternalPkgDomain1(in *jlexer.Lexer, out *MovieBasic) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.Id = string(in.String())
		case "poster":
			out.Poster = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "rating":
			out.Rating = string(in.String())
		case "info":
			out.Info = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a61c37dEncodeCodexInternalPkgDomain1(out *jwriter.Writer, in MovieBasic) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"poster\":"
		out.RawString(prefix)
		out.String(string(in.Poster))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.String(string(in.Rating))
	}
	{
		const prefix string = ",\"info\":"
		out.RawString(prefix)
		out.String(string(in.Info))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}
func easyjson1a61c37dDecodeCodexInternalPkgDomain2(in *jlexer.Lexer, out *ActorBasic) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "href":
			out.Href = string(in.String())
		case "poster":
			out.Poster = string(in.String())
		case "title":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a61c37dEncodeCodexInternalPkgDomain2(out *jwriter.Writer, in ActorBasic) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"href\":"
		out.RawString(prefix[1:])
		out.String(string(in.Href))
	}
	{
		const prefix string = ",\"poster\":"
		out.RawString(prefix)
		out.String(string(in.Poster))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActorBasic) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a61c37dEncodeCodexInternalPkgDomain2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActorBasic) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a61c37dDecodeCodexInternalPkgDomain2(l, v)
}
func easyjson1a61c37dDecodeCodexInternalPkgDomain3(in *jlexer.Lexer, out *Actor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.Id = string(in.String())
		case "avatar":
			out.Imgsrc = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "originalName":
			out.NameOriginal = string(in.String())
		case "career":
			out.Career = string(in.String())
		case "height":
			out.Height = string(in.String())
		case "birthdate":
			out.Birthday = string(in.String())
		case "birthplace":
			out.Birthplace = string(in.String())
		case "total":
			out.Total = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a61c37dEncodeCodexInternalPkgDomain3(out *jwriter.Writer, in Actor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Imgsrc))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"originalName\":"
		out.RawString(prefix)
		out.String(string(in.NameOriginal))
	}
	{
		const prefix string = ",\"career\":"
		out.RawString(prefix)
		out.String(string(in.Career))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.String(string(in.Height))
	}
	{
		const prefix string = ",\"birthdate\":"
		out.RawString(prefix)
		out.String(string(in.Birthday))
	}
	{
		const prefix string = ",\"birthplace\":"
		out.RawString(prefix)
		out.String(string(in.Birthplace))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.String(string(in.Total))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Actor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a61c37dEncodeCodexInternalPkgDomain3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Actor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a61c37dDecodeCodexInternalPkgDomain3(l, v)
}
