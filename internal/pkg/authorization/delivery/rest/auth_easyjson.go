// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package autdelivery

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4a0f95aaDecodeCodexInternalPkgAuthorizationDeliveryRest(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.Id = uint64(in.Uint64())
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "imgsrc":
			out.Imgsrc = string(in.String())
		case "repeatpassword":
			out.RepeatPassword = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a0f95aaEncodeCodexInternalPkgAuthorizationDeliveryRest(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Id))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"imgsrc\":"
		out.RawString(prefix)
		out.String(string(in.Imgsrc))
	}
	if in.RepeatPassword != "" {
		const prefix string = ",\"repeatpassword\":"
		out.RawString(prefix)
		out.String(string(in.RepeatPassword))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a0f95aaEncodeCodexInternalPkgAuthorizationDeliveryRest(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a0f95aaDecodeCodexInternalPkgAuthorizationDeliveryRest(l, v)
}
func easyjson4a0f95aaDecodeCodexInternalPkgAuthorizationDeliveryRest1(in *jlexer.Lexer, out *AuthResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "ID":
			out.Id = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a0f95aaEncodeCodexInternalPkgAuthorizationDeliveryRest1(out *jwriter.Writer, in AuthResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if in.Id != "" {
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a0f95aaEncodeCodexInternalPkgAuthorizationDeliveryRest1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a0f95aaDecodeCodexInternalPkgAuthorizationDeliveryRest1(l, v)
}
